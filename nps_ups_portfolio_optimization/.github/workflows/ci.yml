name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libcairo2-dev \
          libpango1.0-dev \
          libgdk-pixbuf2.0-dev \
          libffi-dev \
          shared-mime-info

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"

    - name: Lint with ruff
      run: |
        ruff check nps_ups/ tests/ --output-format=github

    - name: Check code formatting with black
      run: |
        black --check nps_ups/ tests/

    - name: Type checking with mypy
      run: |
        mypy nps_ups/ --ignore-missing-imports

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=nps_ups --cov-report=xml --cov-report=html

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Test CLI functionality
      run: |
        python -m nps_ups --help
        python -m nps_ups load-data --help
        python -m nps_ups run-analysis --help

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check
      run: |
        safety check --json || true

    - name: Run bandit security check
      run: |
        bandit -r nps_ups/ -f json || true

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: success()

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  integration:
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libcairo2-dev \
          libpango1.0-dev \
          libgdk-pixbuf2.0-dev \
          libffi-dev \
          shared-mime-info

    - name: Install package
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Run integration test
      run: |
        mkdir -p test_output
        timeout 300 python -m nps_ups run-analysis \
          --scenarios base \
          --n-simulations 100 \
          --current-age 30 \
          --retirement-age 60 \
          --current-salary 1000000 || echo "Integration test completed with timeout"

    - name: Check output files
      run: |
        ls -la output/ || echo "No output directory found"
        ls -la test_output/ || echo "No test output directory found" 